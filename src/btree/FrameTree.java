package btree;

import graph.FrameGraph;
import java.awt.Component;
import java.awt.event.ActionListener;
import javax.swing.JOptionPane;


public class FrameTree extends javax.swing.JFrame {
    
    Tree a = new Tree();    

    public FrameTree() {
        initComponents();
    }


    @Override
    public void setLocation(int x, int y) {
        super.setLocation(x, y);
    }

    @Override
    public void setLocationRelativeTo(Component c) {
        super.setLocationRelativeTo(null);
    }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtUserText = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtRemove = new javax.swing.JTextField();
        labelResult = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        btnSearch = new javax.swing.JButton();
        btnGame = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        txtInOrder = new javax.swing.JTextField();
        txtSearch = new javax.swing.JTextField();
        btnRemove = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("BSTree");
        setBackground(java.awt.SystemColor.activeCaption);
        setResizable(false);

        jLabel1.setText("Insert space separated numbers");

        txtUserText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtUserTextKeyPressed(evt);
            }
        });

        jLabel2.setText("Search word");

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Numbers"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Table.setColumnSelectionAllowed(true);
        jScrollPane1.setViewportView(Table);
        Table.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnGame.setText("Game");
        btnGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGameActionPerformed(evt);
            }
        });

        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        jLabel3.setText("In Order");

        btnRemove.setText("Remove");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(btnSearch)
                            .add(txtSearch, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 94, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(labelResult, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 90, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(33, 33, 33)
                                .add(btnRemove)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(txtRemove, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 85, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 440, Short.MAX_VALUE)
                                .add(btnGame)
                                .add(33, 33, 33))))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 497, Short.MAX_VALUE)
                        .add(btnClear)
                        .add(29, 29, 29)
                        .add(btnExit)
                        .addContainerGap())
                    .add(layout.createSequentialGroup()
                        .add(txtInOrder, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 517, Short.MAX_VALUE)
                        .add(90, 90, 90))
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                                .add(org.jdesktop.layout.GroupLayout.LEADING, jScrollPane1)
                                .add(org.jdesktop.layout.GroupLayout.LEADING, jLabel1)
                                .add(org.jdesktop.layout.GroupLayout.LEADING, txtUserText, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 479, Short.MAX_VALUE))
                            .add(jLabel2)
                            .add(jLabel3))
                        .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(txtUserText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 121, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(btnRemove)
                        .add(txtRemove, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createSequentialGroup()
                        .add(jLabel2)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(labelResult, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(txtSearch, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(btnSearch)
                    .add(btnGame))
                .add(18, 18, 18)
                .add(jLabel3)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(txtInOrder, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 20, Short.MAX_VALUE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(btnExit)
                    .add(btnClear))
                .addContainerGap())
        );

        setSize(new java.awt.Dimension(633, 415));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents



    @SuppressWarnings({"static-access", "empty-statement"})
    private void txtUserTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtUserTextKeyPressed

        // separate integer 'words' from a space separated set of numbers
        Node node;
        String text;
        String pal;
        text = this.txtUserText.getText().trim();

        try {
            if (evt.getKeyCode() == evt.VK_ENTER) {

                int pos = text.indexOf(" ");
                while (pos != -1) {
                    pal = text.substring(0, pos);
                    // Insertion
                    Integer i = new Integer(Integer.parseInt(pal));
                    a.insertBST(i);
                    node = this.a.searchBST(i);
                    if (node != null) {
                        node.setFa(this);
                    }

                    text = text.substring(pos + 1, text.length());

                    pos = text.indexOf(" ");
                    javax.swing.table.DefaultTableModel dtv = (javax.swing.table.DefaultTableModel) this.Table.getModel();
                    //Adiciona uma nova Linha
                    dtv.addRow(new Object[]{pal});
                }
                // Last 'word' insertion                
                Integer i = new Integer(Integer.parseInt(text));
                a.insertBST(i);
                node = this.a.searchBST(i);
                if (node != null) {
                    node.setFa(this);
                }

                javax.swing.table.DefaultTableModel dtv2 = (javax.swing.table.DefaultTableModel) this.Table.getModel();
                dtv2.addRow(new Object[]{text});
            }
            // In Order listing
            a.inOrder();
        } catch (Exception e) {
            //JOptionPane.showMessageDialog(this, "Error: Duplicate item or non numeric", "Exception", JOptionPane.ERROR_MESSAGE);
            //btnLimpar.addActionListener((ActionListener) this);
            txtSearch.setText(null);
            txtRemove.setText(null);
            txtInOrder.setText(null);
            txtUserText.setText(null);
            labelResult.setText(null);
            javax.swing.table.DefaultTableModel dtv = (javax.swing.table.DefaultTableModel) this.Table.getModel();
            dtv.setRowCount(0);
            a.setRoot(null);
        }

    }//GEN-LAST:event_txtUserTextKeyPressed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed

        String pal;
        try{
        pal = this.txtSearch.getText().trim();
        Integer i = new Integer(Integer.parseInt(pal));
        this.labelResult.setText(String.valueOf(a.NodeExists(i)));
        }catch(Exception e){
         JOptionPane.showMessageDialog(this, "Erro: Valor a pesquisar é null.", "Exception", JOptionPane.INFORMATION_MESSAGE);
        }       
    }//GEN-LAST:event_btnSearchActionPerformed


    @SuppressWarnings("static-access")
    private void btnGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGameActionPerformed

        this.setVisible(false);
        
        FrameGraph frameG = new FrameGraph();
        frameG.setVisible(true);
        
        frameG.setLocationRelativeTo(null);
    }//GEN-LAST:event_btnGameActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        if (JOptionPane.showConfirmDialog(null, "Clear everything?", "Question", JOptionPane.YES_OPTION) == 0) {
            this.txtSearch.setText(null);
            this.txtRemove.setText(null);
            this.txtInOrder.setText(null);
            this.txtUserText.setText(null);
            this.labelResult.setText(null);
            javax.swing.table.DefaultTableModel dtv = (javax.swing.table.DefaultTableModel) this.Table.getModel();
            dtv.setRowCount(0);
            a.setRoot(null);
        }
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        if (JOptionPane.showConfirmDialog(null, "Exit program?", "Question", JOptionPane.YES_OPTION) == 0) {
            System.exit(0);
        }
    }//GEN-LAST:event_btnExitActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed

        String pal;
        try{
        pal = this.txtRemove.getText().trim();
        Integer i = new Integer(Integer.parseInt(pal));
        if (JOptionPane.showConfirmDialog(null, "Remove node?", "Question", JOptionPane.YES_OPTION) == 0)
        {
            this.txtInOrder.setText(null);
            a.deleteBST(i);
            //Listagem em InOrdem
            a.inOrder();}
        }catch(Exception e){
         JOptionPane.showMessageDialog(this,"Error: Value to remove is null", "Exception", JOptionPane.ERROR_MESSAGE);
         a.inOrder();
        }
    }//GEN-LAST:event_btnRemoveActionPerformed

    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new FrameTree().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Table;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnGame;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnSearch;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelResult;
    private javax.swing.JTextField txtInOrder;
    private javax.swing.JTextField txtRemove;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JTextField txtUserText;
    // End of variables declaration//GEN-END:variables

    public void addTxtInOrder(String str) {
        this.txtInOrder.setText(this.txtInOrder.getText()+" "+str);
    }

    public void clearTxtInOrder() {
        this.txtInOrder.setText("");
    }

     public void clearTxtUser() {
        this.txtUserText.setText(null);
    }

    void addTxtInOrder(Object element) {
        this.txtInOrder.setText(this.txtInOrder.getText()+" "+element);
    }


}




